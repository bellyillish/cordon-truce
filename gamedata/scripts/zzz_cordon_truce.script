CONFIG = {
  -- checks truce status and prunes data (real time)
  cleanupPeriod = 1000,
  -- how long truces are stopped (game time)
  stopTruceExpires = 4 * 3600000,
  -- duration of stand offs before NPCs move on (game time)
  standoffExpires = 60000,
  -- time before NPCs will stand off again after expiration (game time)
  cooldownExpires = 120000,
  -- radius that NPCs will stand off (meters)
  warnDistance = 16,
  -- radius that NPCs will attack (meters)
  fireDistance = 8,
  -- enables/disables standoff behavior
  useWarningBehavior = true,
  -- whether distance-based attacks stop truces
  standoffsStopTruce = false,
}

STATE = {
  standoffs = {},
  cooldowns = {},
  stopTruce = nil,
}


-- UTILS --
  function isArmyLonerCordon(npc, enemy)
    if not (npc and enemy) then
      return false
    end

    if level.name() ~= "l01_escape" then
      return false
    end

    local comm1 = character_community(npc)
    local comm2 = character_community(enemy)

    if comm1 == "stalker" and comm2 == "army" or comm1 == "army" and comm2 == "stalker" then
      return true
    end

    if npc:id() == 0 and (comm1 == "actor_stalker" and comm2 == "army" or comm1 == "actor_army" and comm2 == "stalker") then
      return true
    end

    if enemy:id() == 0 and (comm1 == "stalker" and comm2 == "actor_army" or comm1 == "army" and comm2 == "actor_stalker") then
      return true
    end

    return false
  end

  function showNews(id, ...)
    news_manager.send_tip(db.actor, string.format(game.translate_string(id), ...))
  end

  function getDistance(a, b)
    return a and b and round_idp(distance_between(a, b), 2)
  end

  function getStandoffEnemy(npc)
    return npc
      and STATE.standoffs[npc:id()]
      and level.object_by_id(STATE.standoffs[npc:id()].id)
  end

  function getCooldownEnemy(npc)
    return npc
      and STATE.cooldowns[npc:id()]
      and level.object_by_id(STATE.cooldowns[npc:id()].id)
  end

  function getCommunityLabel(npc)
    local comm = character_community(npc)
    return comm and game.translate_string(comm) or comm
  end
--

-- CALLBACKS --
  function onEvalEnemy(npc, enemy, flags)
    if not isArmyLonerCordon(npc, enemy) then
      return
    end

    if STATE.stopTruce then
      return
    end

    local standoff = STATE.standoffs[npc:id()]
    local cooldown = STATE.cooldowns[npc:id()]
    local distance = getDistance(npc, enemy)

    if distance > CONFIG.warnDistance then
      standoff = nil
    end

    if standoff and standoff.expires < game.time() then
      standoff = nil
      cooldown = {id = enemy:id(), expires = game.time() + CONFIG.cooldownExpires}
    end

    if cooldown and cooldown.expires < game.time() then
      cooldown = nil
    end

    if distance <= CONFIG.warnDistance then
      local standoffDist = getDistance(getStandoffEnemy(npc))

      local newStandoff = {
        expires = standoff and standoff.expires or game.time() + CONFIG.standoffExpires,
        fire    = distance <= CONFIG.fireDistance,
        id      = enemy:id(),
      }

      if cooldown and newStandoff and not newStandoff.fire then
        newStandoff = nil
      end

      if standoff and standoff.fire and newStandoff and not newStandoff.fire then
        newStandoff = nil
      end

      if standoffDist and distance >= standoffDist then
        newStandoff = nil
      end

      if newStandoff then
        standoff = newStandoff
      end
    end

    STATE.standoffs[npc:id()] = standoff
    STATE.cooldowns[npc:id()] = cooldown

    if standoff and standoff.fire then
      return
    end

    flags.result   = false
    flags.override = true
  end

  function onEvalHit(npc, amount, dir, who, bone)
    if not isArmyLonerCordon(npc, who) then
      return
    end

    local standoff    = STATE.standoffs[npc:id()]
    local whoStandoff = STATE.standoffs[who:id()]

    if who:id() ~= 0 and not CONFIG.standoffsStopTruce and (standoff and standoff.attack or whoStandoff and whoStandoff.attack) then
      return
    end

    if not STATE.stopTruce then
      showNews("msg_cordon_truce_stopped", who:character_name(), getCommunityLabel(who))
    end

    STATE.stopTruce = {id = who:id(), expires = game.time() + CONFIG.stopTruceExpires}
  end

  function onActorUpdate()
    -- expired truce stops
    if STATE.stopTruce and STATE.stopTruce.expires < game.time() then
      showNews("msg_cordon_truce_resumed")
      STATE.stopTruce = nil
    end

    -- invalid standoffs
    for id, standoff in pairs(STATE.standoffs) do
      local enemy = level.object_by_id(standoff.id)
      local npc   = level.object_by_id(id)

      if not (npc and npc:alive() and enemy and enemy:alive()) then
        STATE.standoffs[id] = nil
      elseif standoff.expires < game.time() then
        STATE.standoffs[id] = nil
      end
    end

    -- invalid cooldowns
    for id, cooldown in pairs(STATE.cooldowns) do
      local enemy = level.object_by_id(cooldown.id)
      local npc   = level.object_by_id(id)

      if not (npc and npc:alive() and enemy and enemy:alive()) then
        STATE.cooldowns[id] = nil
      elseif cooldown.expires < game.time() then
        STATE.cooldowns[id] = nil
      end
    end
  end

  function onSaveState(mdata)
    mdata.CORDON_TRUCE = STATE
  end

  function onLoadState(mdata)
    if mdata.CORDON_TRUCE then
      STATE = mdata.CORDON_TRUCE
    end
  end

  function on_game_start()
    local throttleActorUpdate = throttle(onActorUpdate, CONFIG.cleanupPeriod)

    RegisterScriptCallback("npc_on_hit_callback", onEvalHit)
    RegisterScriptCallback("on_enemy_eval",       onEvalEnemy)
    RegisterScriptCallback("actor_on_update",     throttleActorUpdate)
    RegisterScriptCallback("save_state",          onSaveState)
    RegisterScriptCallback("load_state",          onLoadState)
  end
--

-- PATCHES --
  local danger_evaluate       = xr_danger.evaluator_danger.evaluate
  local check_danger_evaluate = xr_danger.evaluator_check_danger.evaluate
  local action_danger_execute = xr_danger.action_danger.execute

  -- short-circuit to danger behavior if there is a standoff
  function xr_danger.evaluator_danger:evaluate()
    local npc      = self.object
    local enemy    = getStandoffEnemy(npc)
    local standoff = STATE.standoffs[npc:id()]

    if not CONFIG.useWarningBehavior then
      return danger_evaluate(self)
    end

    if not isArmyLonerCordon(npc, enemy) or standoff and standoff.fire then
      return danger_evaluate(self)
    end

    return true
  end

  -- short-circuit to script_danger so we can control NPCs
  function xr_danger.evaluator_check_danger:evaluate()
    local npc      = self.object
    local enemy    = getStandoffEnemy(npc)
    local standoff = STATE.standoffs[npc:id()]

    if not CONFIG.useWarningBehavior then
      return check_danger_evaluate(self)
    end

    if not isArmyLonerCordon(npc, enemy) or standoff and standoff.fire then
      return check_danger_evaluate(self)
    end

    self.a.danger_time = nil
    self.a.inertion    = nil

    xr_danger.set_script_danger(npc, 3000, enemy:id(), enemy:position())

    return true
  end

  -- short-circuit custom danger action for standoffs
  function xr_danger.action_danger:execute()
    local npc      = self.object
    local enemy    = getStandoffEnemy(npc)
    local standoff = STATE.standoffs[npc:id()]

    if not CONFIG.useWarningBehavior then
      return action_danger_execute(self)
    end

    if not isArmyLonerCordon(npc, enemy) or standoff and standoff.fire then
      return action_danger_execute(self)
    end

    local lookDir = vector()
      :set(enemy:position())
      :sub(npc:position())
      :normalize()

    state_mgr.set_state(npc, "threat", nil, nil, {look_dir = lookDir})
  end
--
